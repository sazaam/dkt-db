
let b = {
  
  mutation: `
    createSection(name: String!, position: Int!, parent: ID, post:ID): Section!
  `,
  resolver: {
    Mutation: {
      createSection: {
        description: 'Creates and Returns a newly-made Section',
        resolverOf: 'application::section.section.create',
        resolver: async (obj, options, ctx) => {
          console.log('SA MEEEEERE')
          return await strapi.api.section.services.section.create(options || {});
        },
      },
    },
  },
}

let o = {
  definition: `
    
  `,
  query: `
    sectionsCount(where: JSON): Int!
  `,
  resolver: {
    Query: {
      sectionsCount: {
        description: 'Return the count of sections',
        resolverOf: 'application::section.section.count',
        resolver: async (obj, options, ctx) => {
          return await strapi.api.section.services.section.count(options.where || {});
        },
      },
    },
  },
  
}


module.exports = o ;